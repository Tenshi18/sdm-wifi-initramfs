#!/bin/bash
#
# This is an sdm plugin for: update-alternatives
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

function converty() {
    [ -v get__selections ] && get__selections=y
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
loadparams
vldargs="|get-selections|set-one|set-many|setpath|"
vldargs="|$vldargs|query-alternative|install-alternative|installpath|link|priority|"
rqdargs=""                   # |list|of|required|args|or|nullstring|
assetdir="$SDMPT/etc/sdm/assets/$pfx"

if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    converty
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_printkeys
    mkdir -p $assetdir
    #
    # if set, validate path is provided
    # if set-many, validate/copy file to assets
    #
    if [ "$set__one" != "" ]
    then
	[ "$setpath" == "" ] && logtobothex "? Plugin $pfx: Missing 'setpath' argument"
    elif [ "$set__many" != "" ]
    then
	[ -f $set__many ] || logtobothex "? Plugin $pfx: 'set-list' file '$set__many' not found"
	logtoboth "> Plugin $pfx: Copy '$set__many' to $assetdir/$(basename $set__many).setlist"
	cp $set__many $assetdir/$(basename $set__many).setlist
    fi
    if [ -v query__alternative ]
    then
	[ "$query__alternative" == "" ] && logtobothex "? Plugin $pfx: No alternatives provided for 'query-selection'"
    fi
    if [ "$install__alternative" != "" ]
    then
	[ "$link" == "" ] && logtobothex "? Plugin $pfx: Missing argument 'link' to install '$install'"
	[ "$installpath" == "" ] && logtobothex "? Plugin $pfx: Missing argument 'installpath' to install '$install'"
	[ "$priority" == "" ] && logtobothex "? Plugin $pfx: Missing argument 'priority' to install '$install'"
    fi
    logtoboth "* Plugin $pfx: Complete Phase 0"
elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase 1"
    #
    #logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
elif [ "$phase" == "post-install" ]
then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    converty
    plugin_printkeys
    #
    # Execute request
    #
    if [ "$get__selections" == "y" ]
    then
	logtoboth "> Plugin $pfx: update-alternatives get-selections"
	runcaptureout "update-alternatives --get-selections"
    fi
    if [ "$set__one" != "" ]
    then
	logtoboth "> Plugin $pfx: Set selection '$set__one' to '$setpath'"
	runcaptureout "update-alternatives --set $set__one $setpath" || logtobothex "? Plugin $pfx: Error '$?' from update-alternatives"
    elif [ "$set__many" != "" ]
    then
	bnm=$(basename $set__many).setlist
	logtoboth "> Plugin $pfx: Load selections from $assetdir/$bnm"
	#update-alternatives --set-selections < $assetdir/$bnm || logtobothex "? Plugin $pfx: Error '$?' from update-alternatives"
	bruncaptureout "update-alternatives --set-selections < $assetdir/$bnm" || logtobothex "? Plugin $pfx: Error '$?' from update-alternatives"
    fi
    if [ "$install__alternative" != "" ]
    then
	logtoboth "> Plugin $pfx: Install link name '$install__alternative' with path '$installpath' link '$link' priority '$priority'"
	runcaptureout "update-alternatives --install $link $install__alternative $installpath $priority" || logtobothex "? Plugin $pfx: Error '$?' from update-alternatives"

    fi
    if [ "$query__alternative" != "" ]
    then
	IFS="," read -a qitems <<< "$query__alternative"
	for alt in "${qitems[@]}"
	do
	    logtoboth "> Plugin $pfx: Configuration for alternative '$alt'"
	    bruncaptureout "update-alternatives --config $alt < /dev/null" nosplit "<" || logtobothex "? Plugin $pfx: Error '$?' from update-alternatives"
	done
    fi
    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi
exit 0
