#!/bin/bash
#
# This is an sdm plugin for: wireguard
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

function pubkeyname() {
    # $1: remote-public-key value
    local rpk=$1 bn
    bn=$(basename $rpk)
    echo "$bn.publickey"
}

function makenftnat() {
    local wgname=$1

    logtoboth "> Plugin $pfx: Write /usr/local/bin/sdm-wg-$wgname-nft for $wgname NAT forwarding"
    cat >| /usr/local/bin/sdm-wg-$wgname-nft <<EOF
#!/sbin/nft -f

define pubif = eth0

table inet nat$wgname {
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        iifname $wgname oifname \$pubif masquerade
    }
}
EOF
    chmod 755 /usr/local/bin/sdm-wg-$wgname-nft
}

function converty() {
    [ -v enablesvc ] && enablesvc=y
    [ -v addpeer ] && addpeer=${addpeer:-remote}
    [ "$wgname" == "" ] && wgname=wg0
    [ -v generate__host__keys ] && generate__host__keys=y
    [ -v generate__remote__keys ] && generate__remote__keys=y
    [ -v ipforward ] && [ "$ipforward" == "" ] && ipforward=nftables
    [[ "$ipforward" =~ tables ]] || ipforward=nftables # anything else becomes nftables
    allowed__ips=${allowed__ips:-0.0.0.0/0, ::/0}
    listen__port=${listen__port:-51820}
    wghostname=${wghostname:-$wgname}
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
loadparams
vldargs="|address|allowed-ips|dns|endpoint|generate-host-keys|import-private-key|import-public-key|ipforward|listen-port|mtu|preshared-key|preup|predown|postup|postdown|table|wgname|wghostname|enablesvc"
vldargs="$vldargs|addpeer|generate-remote-keys|remote-public-key|persistent-keepalive|"
rqdargs=""
assetdir="$SDMPT/etc/sdm/assets/$pfx"

if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_printkeys
    converty
    mkdir -p $assetdir/$wgname
    #
    # Check arg sanity
    #
    if [ "$addpeer" != "" ]
    then
	#
	# addpeer to existing interface
	#
	[ -f $assetdir/$wgname/$wgname.defined ] || logtobothex "? Plugin $pfx: Wireguard interface '$wgname' not configured"
	if [ "$remote__public__key" != "" ]
	then
	    [ "$generate__remote__keys" != "" ] && logtobothex "? Plugin $pfx: Only one of 'generate-remote-keys' or 'remote-public-key' may be provided"
	    [ -f $remote__public__key ] || logtobothex "? Plugin $pfx: Remote public key file '$remote__public__key' not found"
	    cp $remote__public__key $assetdir/$wgname/$(pubkeyname $addpeer)
	else
	    [ "$generate__remote__keys" == "" ] && logtobothex "? Plugin $pfx: One of 'generate-remote-keys' or 'remote-public-key' must be provided"
	fi
    else
	#
	# define new interface
	#
	if [ "$generate__host__keys" != "" ]
	then
	    [ "$import__private__key$import__public__key" != "" ] && logtobothex "? Plugin $pfx: import-private-key and import-public-key conflict with generate-host-keys"
	else
	    [ "$import__private__key$import__public__key" == "" ] && logtobothex "? Plugin $pfx: One of 'generate-host-keys' or 'import-public-key'+'import-private-key' must be provided"
	    if [ "$import__private__key" != "" ]
	    then
		[ -f $import__private__key ] || logtobothex "? Plugin $pfx: import-private-key file '$import__private__key' not found"
		logtoboth "> Plugin $pfx: Copy private key '$import__private__key' to $assetdir/$wgname/$wgname.privatekey"
		cp $import__private__key $assetdir/$wgname/$wghostname.privatekey
	    else
		logtobothex "? Plugin $pfx: Expected 'import-private-key' not provided"
	    fi
	    if [ "$import__public__key" != "" ]
	    then
		[ -f $import__public__key ] || logtobothex "? Plugin $pfx: import-public-key file '$import__public__key' not found"
		logtoboth "> Plugin $pfx: Copy public key '$import__public__key' to $assetdir/$wgname/$wgname.publickey"
		cp $import__public__key $assetdir/$wgname/$wghostname.publickey
	    #else
		#logtobothex "? Plugin $pfx: Expected 'import-public-key' not provided"
	    fi
	fi
    fi
    if [ "$preshared__key" != "" ]
    then
	[ -f $preshared__key ] || logtobothex "? Plugin $pfx: preshared-key file '$preshared__key' not found"
	[ "$addpeer" == "" ] && logtobothex "? Plugin $pfx: preshared-key only valid with 'addpeer'"
	cp $preshared__key $assetdir/$wgname/$addpeer-preshared.key
    fi
    touch $assetdir/$wgname/$wgname.defined
    logtoboth "* Plugin $pfx: Complete Phase 0"
elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    plugin_printkeys
    converty
    #logfreespace "at start of Plugin $pfx Phase 1"
    #
    [ "$ipforward" == "iptables" ] && tblpkg=iptables || tblpkg=nftables
    installpkgsif "wireguard-tools $tblpkg"
    if [ "$addpeer" == "" ]
    then
	#
	# define new Interface
	#
	if [ "$generate__host__keys" != "" ]
	then
	    #
	    # Generate keys
	    #
	    smask=$(umask -p)
	    umask 077
	    [ "$wghostname" != "$wgname" ] && hmsg=" host '$wghostname'" || hmsg=""
	    logtoboth "> Plugin $pfx: Generate public and private keys for interface '$wgname'$hmsg"
	    wg genkey | tee $assetdir/$wgname/$wghostname.privatekey | wg pubkey > $assetdir/$wgname/$wghostname.publickey
	    $smask
	fi
	logtoboth "> Plugin $pfx: Configure interface '$wgname'"
	printf "# $wgname config generated by sdm $(thisdate)\n[Interface]\n" >>/etc/wireguard/$wgname.conf
	[ "$address" != "" ] && baddress="Address = $address" || { logtoboth "% Plugin $pfx: Missing 'address' argument for '$wgname'" ; baddress="# No address provided" ; }
	printf "$baddress\n" >>/etc/wireguard/$wgname.conf
	printf "ListenPort = $listen__port\n" >>/etc/wireguard/$wgname.conf
        [ -f $assetdir/$wgname/$wghostname.privatekey ] && printf "PrivateKey = $(cat $assetdir/$wgname/$wghostname.privatekey)\n" >>/etc/wireguard/$wgname.conf || logtoboth "% Plugin $pfx: No private key for '$wgname'"
	[ "$dns" != "" ] && printf "DNS = $dns\n" >>/etc/wireguard/$wgname.conf
	if [ "$ipforward" != "" ]
	then
	    case "$ipforward" in
		nftables)
		    logtoboth "> Plugin $pfx: Enable IP forwarding using nftables"
		    makenftnat $wgname
		    if [ "$preup$postup$predown$postdown" == "" ]
		    then
			printf "PostUp = /usr/local/bin/sdm-wg-$wgname-nft\n" >>/etc/wireguard/$wgname.conf
			printf "PostDown = nft delete table inet nat$wgname\n" >>/etc/wireguard/$wgname.conf
		    else
			[ "$preup" != "" ] && printf "PreUp = $preup\n" >>/etc/wireguard/$wgname.conf
			[ "$postup" != "" ] && printf "PostUp = $postup\n" >>/etc/wireguard/$wgname.conf
			[ "$predown" != "" ] && printf "PreDown = $predown\n" >>/etc/wireguard/$wgname.conf
			[ "$postdown" != "" ] && printf "PostDown = $postdown\n" >>/etc/wireguard/$wgname.conf
		    fi
		    ;;
		iptables)
		    if [ "$preup$postup$predown$postdown" == "" ]
		    then
			printf "PostUp = iptables -A FORWARD -i $wgname -j ACCEPT; iptables -A FORWARD -o $wgname -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE \n" >>/etc/wireguard/$wgname.conf
			printf "PostDown = iptables -D FORWARD -i $wgname -j ACCEPT; iptables -D FORWARD -o $wgname -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE \n" >>/etc/wireguard/$wgname.conf
		    else
			[ "$preup" != "" ] && printf "PreUp = $preup\n" >>/etc/wireguard/$wgname.conf
			[ "$postup" != "" ] && printf "PostUp = $postup\n" >>/etc/wireguard/$wgname.conf
			[ "$predown" != "" ] && printf "PreDown = $predown\n" >>/etc/wireguard/$wgname.conf
			[ "$postdown" != "" ] && printf "PostDown = $postdown\n" >>/etc/wireguard/$wgname.conf
		    fi
		    ;;
	    esac
	    echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/92-sdm-wireguard.conf
	    pgrep systemd >/dev/null 2>&1 && sysctl 'net.ipv4.ip_forward=1' >/dev/null
	fi
	printf "\n" >>/etc/wireguard/$wgname.conf
    fi
    #
    #logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
elif [ "$phase" == "post-install" ]
then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    plugin_printkeys
    converty
    #logfreespace "at start of Plugin $pfx Phase post-install"
    #
    if [ "$addpeer" != "" ]
    then
	#
	# addpeer to existing interface
	#
	[ -f $assetdir/$wgname/$wgname.defined ] || logtobothex "? Plugin $pfx: Wireguard interface '$wgname' not configured"
	if [ "$generate__remote__keys" != "" ]
	then
	    logtoboth "> Plugin $pfx: Generate public and private keys for remote host '$addpeer' in $assetdir/$wgname/$addpeer.*"
	    wg genkey | tee $assetdir/$wgname/$addpeer.privatekey | wg pubkey > $assetdir/$wgname/$addpeer.publickey
	fi
	pkey="$assetdir/$wgname/$(pubkeyname $addpeer)"
	printf "# Peer '$addpeer' config generated by sdm $(thisdate)\n" >>/etc/wireguard/$wgname.conf
	printf "[Peer]\n" >>/etc/wireguard/$wgname.conf
	printf "PublicKey = $(cat $pkey)\n" >>/etc/wireguard/$wgname.conf
	[ "$preshared__key" != "" ] && printf "PresharedKey = $(cat $assetdir/$wgname/$addpeer-preshared.key)\n" >>/etc/wireguard/$wgname.conf
	printf "AllowedIPs = $allowed__ips\n" >>/etc/wireguard/$wgname.conf
	[ "$endpoint" != "" ] && printf "Endpoint = $endpoint\n" >>/etc/wireguard/$wgname.conf
	[ "$persistent__keepalive" != "" ] && printf "PersistentKeepalive = $persistent__keepalive\n" >>/etc/wireguard/$wgname.conf
	printf "\n" >>/etc/wireguard/$wgname.conf
    fi
    if [ "$enablesvc" != "" ]
    then
	pgrep systemd >/dev/null 2>&1 && now="--now" || now=""
	systemctl -q enable $now wg-quick@$wgname
    fi
    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi

exit
