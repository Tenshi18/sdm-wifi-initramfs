#!/bin/bash
#
# This is an sdm plugin for: graphics
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
loadparams
vldargs="|graphics|nodmconsole|nopiwiz|videomode|runfunction|runargs|"
rqdargs=""
assetdir="$SDMPT/etc/sdm/assets/graphics"

if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    plugin_printkeys
elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    #logfreespace "at start of Plugin $pfx Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    case "${graphics,,}" in
	labwc)
	    [ "$(type -p labwc)" == "" ] && logtobothex "? Plugin $pfx: Labwc is not installed"
	    ;;
	wayfire)
	    [ "$(type -p wayfire)" == "" ] && logtobothex "? Plugin $pfx: wayfire is not installed"
	    ;;
	x11)
	    logtoboth "> Plugin $pfx: X11 requested"
	    if [ ! -x /bin/Xorg ]
	    then
		x11pkgs="xserver-xorg xserver-xorg-core xserver-common"
		logtoboth "> Plugin $pfx: Install Core X11 packages: $x11pkgs"
		doinstalls "$x11pkgs" "X11 Core Install"
	    fi
	    ;;
    esac
    #logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
elif [ "$phase" == "post-install" ]
then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase post-install"
    [ -v nodmconsole ] && nodmconsole=1 || nodmconsole=0
    if [ "$videomode" != "" ]
    then
	logtoboth "> Add cmdline video mode 'video=$videomode' to /boot/cmdline.txt"
	[ -f /boot/cmdline.txt ] && sed -i "1 s/^/video=$videomode /" /boot/cmdline.txt
	[ -f /boot/firmware/cmdline.txt ] && sed -i "1 s/^/video=$videomode /" /boot/firmware/cmdline.txt
    fi
    if [ -v nopiwiz ]
    then
	logtoboth "> Plugin $pfx: Disable running piwiz and userconfig on first system boot"
	[ -f /etc/xdg/autostart/piwiz.desktop ] && mv /etc/xdg/autostart/piwiz.desktop /etc/xdg/autostart/.piwiz.desktop.sdm
	systemctl disable userconfig.service > /dev/null 2>&1
	systemctl mask    userconfig.service > /dev/null 2>&1
	getent passwd rpi-first-boot-wizard > /dev/null && userdel -r rpi-first-boot-wizard > /dev/null 2>&1
	[ -f /etc/systemd/system/getty@tty1.service.d/autologin.conf ] && mv /etc/systemd/system/getty@tty1.service.d/autologin.conf /etc/systemd/system/getty@tty1.service.d/.autologin.conf.sdm
	rm -f /etc/sudoers.d/010_wiz-nopasswd
	rm -f /etc/xdg/autostart/deluser.desktop
    fi
    case "${graphics,,}" in
	labwc|wayland)
	    case "$raspiosver" in
		12) logtoboth "> Plugin $pfx: Set Graphics mode to Wayland Labwc"
		    do_raspiconfig do_wayland W3
		    ;;
		13) logtoboth "> Plugin $pfx: Set Graphics mode to Wayland Labwc"
		    do_raspiconfig do_wayland W2
		    ;;
		*) logtobothex "? Plugin $pfx: sdm does not support Labwc pre-Bookworm"
		   ;;
	    esac
	    ;;
	wayfire)
	    case "$raspiosver" in
		12) logtoboth "> Plugin $pfx: Set Graphics mode to Wayland Wayfire"
		    do_raspiconfig do_wayland W2
		    ;;
		*) logtobothex "? n Plugin $pfx: sdm does not support Wayfire except on Bookworm"
		   ;;
	    esac
	    ;;
	x11)
	    case "$raspiosver" in
		12|13)
		    if ! ispkginstalled gldriver-test
		    then
			logtoboth "% Plugin $pfx: If X11 graphics does not work: sudo apt install gldriver-test"
		    fi
		    if [ -f /etc/lightdm/lightdm.conf ]
		    then
			logtoboth "> Plugin $pfx: Set Graphics mode to X11"
			do_raspiconfig do_wayland W1
		    fi
		    ;;
		# X11 is default on RasPiOS 11 and earlier
		* ) logtoboth "% Plugin $pfx: X11 is default on pre-Bookworm"
		    ;;
	    esac
    esac
    gfxcfgpostinstall
elif [ "$phase" == "runfunction" ]
then
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    plugin_printkeys
    [ -v nodmconsole ] && nodmconsole=1 || nodmconsole=0
    if [ "$runfunction" != "" ]
    then
	logtoboth "> Plugin $pfx: Run function: $runfunction $runargs"
	$runfunction $runargs
    else
	logtobothex "? Plugin $pfx: Run function called with no function"
    fi
fi
